[gd_resource type="VisualShader" load_steps=5 format=3 uid="uid://c4pcl8yadcmdr"]

[sub_resource type="VisualShaderNodeRandomRange" id="VisualShaderNodeRandomRange_hvbal"]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_gb17g"]
input_name = "random_seed"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_hvl8d"]
input_name = "random_seed"

[sub_resource type="VisualShaderNodeRandomRange" id="VisualShaderNodeRandomRange_6r8rg"]

[resource]
code = "shader_type particles;


float __rand_from_seed(inout uint seed) {
	int k;
	int s = int(seed);
	if (s == 0)
	s = 305420679;
	k = s / 127773;
	s = 16807 * (s - k * 127773) - 2836 * k;
	if (s < 0)
		s += 2147483647;
	seed = uint(s);
	return float(seed % uint(65536)) / 65535.0;
}

float __rand_from_seed_m1_p1(inout uint seed) {
	return __rand_from_seed(seed) * 2.0 - 1.0;
}

float __randf_range(inout uint seed, float from, float to) {
	return __rand_from_seed(seed) * (to - from) + from;
}

uint __hash(uint x) {
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = (x >> uint(16)) ^ x;
	return x;
}

mat3 __build_rotation_mat3(vec3 axis, float angle) {
	axis = normalize(axis);
	float s = sin(angle);
	float c = cos(angle);
	float oc = 1.0 - c;
	return mat3(vec3(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s, oc * axis.z * axis.x + axis.y * s), vec3(oc * axis.x * axis.y + axis.z * s, oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s), vec3(oc * axis.z * axis.x - axis.y * s, oc * axis.y * axis.z + axis.x * s, oc * axis.z * axis.z + c));
}

mat4 __build_rotation_mat4(vec3 axis, float angle) {
	axis = normalize(axis);
	float s = sin(angle);
	float c = cos(angle);
	float oc = 1.0 - c;
	return mat4(vec4(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s, oc * axis.z * axis.x + axis.y * s, 0), vec4(oc * axis.x * axis.y + axis.z * s, oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s, 0), vec4(oc * axis.z * axis.x - axis.y * s, oc * axis.y * axis.z + axis.x * s, oc * axis.z * axis.z + c, 0), vec4(0, 0, 0, 1));
}

vec2 __get_random_unit_vec2(inout uint seed) {
	return normalize(vec2(__rand_from_seed_m1_p1(seed), __rand_from_seed_m1_p1(seed)));
}

vec3 __get_random_unit_vec3(inout uint seed) {
	return normalize(vec3(__rand_from_seed_m1_p1(seed), __rand_from_seed_m1_p1(seed), __rand_from_seed_m1_p1(seed)));
}



// 3D Noise with friendly permission by Inigo Quilez
vec3 hash_noise_range( vec3 p ) {
	p *= mat3(vec3(127.1, 311.7, -53.7), vec3(269.5, 183.3, 77.1), vec3(-301.7, 27.3, 215.3));
	return 2.0 * fract(fract(p)*4375.55) -1.;
}

void start() {
	uint __seed = __hash(NUMBER + uint(1) + RANDOM_SEED);

	{
// RandomRange:2
		vec3 n_in2p0 = vec3(1.00000, 1.00000, 1.00000);
		float n_in2p1 = 0.00000;
		float n_in2p2 = 1.00000;
		float n_out2p0 = mix(n_in2p1, n_in2p2, hash_noise_range(n_in2p0).x);


// StartOutput:0
		COLOR.rgb = vec3(n_out2p0);
		if (RESTART_POSITION) {
			TRANSFORM = mat4(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0));
			if (RESTART_VELOCITY) {
				VELOCITY = (EMISSION_TRANSFORM * vec4(VELOCITY, 0.0)).xyz;
			}
			TRANSFORM = EMISSION_TRANSFORM * TRANSFORM;
		}


	}
}

void process() {
	uint __seed = __hash(NUMBER + uint(1) + RANDOM_SEED);

	{
// Input:3
		uint n_out3p0 = RANDOM_SEED;


// Input:4
		uint n_out4p0 = RANDOM_SEED;


// RandomRange:2
		vec3 n_in2p0 = vec3(1.00000, 1.00000, 1.00000);
		float n_in2p1 = 0.00000;
		float n_in2p2 = 1.00000;
		float n_out2p0 = mix(n_in2p1, n_in2p2, hash_noise_range(n_in2p0).x);


// ProcessOutput:0
		ACTIVE = n_out3p0 > 0u ? true : false;
		if(ACTIVE) {
			VELOCITY = vec3(float(n_out4p0));
			COLOR.rgb = vec3(n_out2p0);
		}


	}
}

"
mode = 2
flags/collision_use_scale = false
flags/disable_force = false
flags/disable_velocity = false
flags/keep_data = false
nodes/start/2/node = SubResource("VisualShaderNodeRandomRange_6r8rg")
nodes/start/2/position = Vector2(80, 200)
nodes/start/connections = PackedInt32Array(2, 0, 0, 2)
nodes/process/2/node = SubResource("VisualShaderNodeRandomRange_hvbal")
nodes/process/2/position = Vector2(140, 160)
nodes/process/3/node = SubResource("VisualShaderNodeInput_gb17g")
nodes/process/3/position = Vector2(100, 40)
nodes/process/4/node = SubResource("VisualShaderNodeInput_hvl8d")
nodes/process/4/position = Vector2(60, 320)
nodes/process/connections = PackedInt32Array(2, 0, 0, 2, 3, 0, 0, 0, 4, 0, 0, 1)
